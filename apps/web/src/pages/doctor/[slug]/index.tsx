import type {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import { createServerSideHelpers } from "@trpc/react-query/server";
import superjson from "superjson";

import { appRouter } from "@dakthar/api";
import { prisma } from "@dakthar/db";
import { db as drizzle } from "@dakthar/db2";

// import { useRouter } from "next/router";
import { DoctorInfo } from "~/components/doctor/Doctor";
import { Loader } from "~/components/loader/Loader";
import { api } from "~/utils/api";
import { toTitleCase } from "~/utils/helper";

export async function getStaticProps(context: GetStaticPropsContext) {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: {
      prisma,
      drizzle,
      user: null,
      token: null,
    },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("No slug");

  await helpers.doctor.getBySlug.prefetch({ slug });
  return {
    props: {
      trpcState: helpers.dehydrate(),
      slug,
    },
    revalidate: 1,
  };
}

export const getStaticPaths: GetStaticPaths = async () => {
  const doctors = await prisma.doctor.findMany({
    select: {
      slug: true,
    },
  });
  return {
    paths: doctors.map((doctor) => ({
      params: {
        slug: doctor.slug,
      },
    })),
    // https://nextjs.org/docs/pages/api-reference/functions/get-static-paths#fallback-blocking
    fallback: "blocking",
  };
};

export default function DoctorHome(
  props: InferGetStaticPropsType<typeof getStaticProps>,
) {
  const { slug } = props;
  const doctor = api.doctor.getBySlug.useQuery(
    { slug },
    {
      enabled: !!slug,
    },
  );

  if (doctor.isLoading) {
    return <Loader />;
  }

  if (doctor.error ?? !doctor.data) {
    return <div>Error</div>;
  }

  return (
    <>
      <Head>
        <title>Dr. {toTitleCase(`${doctor.data.user.name ?? "N/A"}`)}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="mx-[20px] mt-5 lg:mx-[90px] lg:mt-10">
          <DoctorInfo {...doctor.data} />
        </div>
      </main>
    </>
  );
}

// export default DoctorHome;
